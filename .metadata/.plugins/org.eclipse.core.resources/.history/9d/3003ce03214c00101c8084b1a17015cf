package com.example.spring02_jpademo.part01.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.example.spring02_jpademo.part01.dto.MemDTO;
import com.example.spring02_jpademo.part01.entity.MemEntity;

@Repository
public interface MemRepository extends JpaRepository<MemEntity, Integer>, MemRepositoryCustom{

	//JPQL (Java Persistence Query Language)
	@Query(value = "SELECT m FROM MemEntity m WHERE m.name = :name")
	List<MemEntity> findByNameJPQL(@Param("name") String name);
	
	//Native Query
	@Query(value = "SELECT * FROM mem WHERE name=:name",nativeQuery = true)
	List<MemEntity> findByNameNative(@Param("name")String name);
	
	// Named Query
	@Query(name="MemEntity.findExpensive")
	List<MemEntity> callNamedQuery(@Param("name")String name);
	
	//쿼리 메소드 : find +엔티티+By+변수
	List<MemEntity>findMemEntityByNumGreaterThanEqual(int num);
	
	//WHERE name='홍길동' AND age=10
	List<MemEntity> findMemEntityByNameAndAge(String name, int age);
	
	//WHERE age IS NULL;
//	List<MemEntity> findMemEntityByAgeIsNull();
	
	//Native Query : Insert, Update, Delete
	@Modifying
	@Transactional
//	@Query(value = "INSERT INTO mem(name, age, loc) VALUES(mem_num)seq.nextval, :name,:age,:loc)",nativeQuery=true)
//	int insertMemByNative(@Param("name") String name, @Param("age") Integer age, @Param("loc") String loc);
	
	@Query(value = "INSERT INTO mem(name, age, loc) VALUES(mem_num)seq.nextval, #{#memDTO.name},#{#memDTO.age},#{#memDTO.loc})", nativeQuery=true)
	int insertMemByNative(@Param("memDTO") MemDTO memDTO);
	
	// JPQL : Updat, Delete
	// JPQL 에서는 Insert은 제공안함
	
	
}
