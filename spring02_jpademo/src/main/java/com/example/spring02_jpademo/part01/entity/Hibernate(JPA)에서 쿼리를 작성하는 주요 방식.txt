[1] Hibernate(JPA)에서 쿼리를 작성하는 주요 방식은 크게 4가지가 있다.
1. JPQL (Java Persistence Query Language)
JPA 표준 쿼리 언어로, SQL과 유사하지만 엔티티 객체를 대상으로 쿼리를 작성함.
데이터베이스 테이블이 아니라 엔티티와 그 속성명을 기준으로 작성.
장점: 객체 지향적인 쿼리, DB 독립성 유지.
단점: 복잡한 쿼리는 표현이 어려움.

JPQL in Spring Data JPA에서 소스 구현
public interface UserRepository extends JpaRepository<User, Long> {
    @Query("SELECT m FROM MemEntity m WHERE m.name = :name")
    List<User> findByNameJPQL(@Param("name") String name);
}
User는 엔티티 이름, name은 필드 이름입니다.
SQL이 아니라 엔티티 기준으로 쿼리 작성합니다.

2 Criteria API
JPQL을 자바 코드로 표현하는 방식.
타입 세이프(컴파일 시점 오류 감지)하며 동적 쿼리 작성에 유리
장점: 동적 쿼리 작성이 쉬움, 컴파일 타임 안전.
단점: 코드가 복잡하고 가독성이 떨어짐.
Criteria API in Spring Data JPA에서 소스 구현
// 1. 사용자 정의 인터페이스
public interface MemRepositoryCustom {
	List<MemEntity> findByDynamicName(String name);
}

// 2. 구현 클래스
@Repository
public class MemRepositoryImpl implements MemRepositoryCustom{
	@PersistenceContext
    private EntityManager em;

    @Override
    public List<MemEntity> findByDynamicName(String name) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<MemEntity> cq = cb.createQuery(MemEntity.class);
        Root<MemEntity> memRoot = cq.from(MemEntity.class);

        Predicate namePredicate = cb.equal(memRoot.get("name"), name);
        cq.where(namePredicate);

        return em.createQuery(cq).getResultList();
    }
}

// 3. 기존 Repository에서 확장
public interface UserRepository extends JpaRepository<User, Long>, MemRepositoryImpl{}

3. Native Query (네이티브 SQL)
DB에 직접 작성하는 SQL을 그대로 사용하는 방식.
복잡한 SQL, DB 고유 문법, 성능 최적화가 필요한 경우에 사용.
장점: 복잡한 쿼리 가능, DB 성능 최적화 쿼리 활용 가능.
단점: DB 종속성 발생, 객체 지향성과 거리가 있음.
Native Query in Spring Data JPA에서 소스 구현
public interface UserRepository extends JpaRepository<User, Long> {

    @Query(value = "SELECT * FROM user WHERE name = :name", nativeQuery = true)
    List<User> findByNameNative(@Param("name") String name);
}
이 경우 user는 DB 테이블명, name은 실제 컬럼명입니다.
DB 종속 SQL을 사용할 수 있습니다 (예: LIMIT, TO_DATE 등)

4. Named Query (이름이 있는 쿼리)
JPQL 또는 Native Query를 미리 정의해두고 이름으로 사용하는 방식.
주로 @NamedQuery 또는 XML에 정의.
장점: 재사용 가능, 코드 깔끔함.
단점: 동적 쿼리에는 부적합.
@NamedQuery(
	    name = "MemEntity.findExpensive",
	    query = "SELECT m FROM MemEntity m WHERE m.name = :name"
	)
public class MemEntity {
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "mem_seq_generator")
	@SequenceGenerator(name = "mem_seq_generator", sequenceName = "mem_num_seq", allocationSize = 1)
	private int num;
	private String name;
	private int age;
	private String loc;
}


//Named Query 호출 (쿼리 이름과 일치해야 함)
	List<MemEntity> findExpensive(@Param("name") String name);
	
	 // 혹은 명시적으로 호출도 가능
    @Query(name = "MemEntity.findExpensive")
    List<MemEntity> callNamedQuery(@Param("name") String name);

https://kwin0825.tistory.com/166

https://velog.io/@evan523/JPA-QueryDSL